unit uPSI_flcFloats;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcFloats = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_flcFloats(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_flcFloats_Routines(S: TPSExec);

procedure Register;

implementation


uses
   flcStdTypes
  ,flcUtils
  ,flcFloats
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcFloats]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_flcFloats(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Function DoubleMin( const A, B : Double) : Double');
 CL.AddDelphiFunction('Function DoubleMax( const A, B : Double) : Double');
 CL.AddDelphiFunction('Function ExtendedMin( const A, B : Extended) : Extended');
 CL.AddDelphiFunction('Function ExtendedMax( const A, B : Extended) : Extended');
 CL.AddDelphiFunction('Function FloatMin( const A, B : Float) : Float');
 CL.AddDelphiFunction('Function FloatMax( const A, B : Float) : Float');
 CL.AddDelphiFunction('Function FloatClip( const Value : Float; const Low, High : Float) : Float');
 CL.AddDelphiFunction('Function InSingleRange( const A : Float) : Boolean');
 CL.AddDelphiFunction('Function InDoubleRange( const A : Float) : Boolean');
 CL.AddDelphiFunction('Function InCurrencyRange0( const A : Float) : Boolean;');
 CL.AddDelphiFunction('Function InCurrencyRange1( const A : Int64) : Boolean;');
 CL.AddDelphiFunction('Function ExtendedExponentBase2( const A : Extended; var Exponent : Integer) : Boolean');
 CL.AddDelphiFunction('Function ExtendedExponentBase10( const A : Extended; var Exponent : Integer) : Boolean');
 CL.AddDelphiFunction('Function ExtendedIsInfinity( const A : Extended) : Boolean');
 CL.AddDelphiFunction('Function ExtendedIsNaN( const A : Extended) : Boolean');
 CL.AddConstantN('SingleCompareDelta','Extended').setExtended( 1.0E-34);
 CL.AddConstantN('DoubleCompareDelta','Extended').setExtended( 1.0E-280);
 CL.AddConstantN('ExtendedCompareDelta','').SetString( DoubleCompareDelta);
 CL.AddConstantN('ExtendedCompareDelta','Extended').setExtended( 1.0E-4400);
 CL.AddConstantN('DefaultCompareDelta','').SetString( SingleCompareDelta);
 CL.AddDelphiFunction('Function FloatZero( const A : Float; const CompareDelta : Float) : Boolean');
 CL.AddDelphiFunction('Function FloatOne( const A : Float; const CompareDelta : Float) : Boolean');
 CL.AddDelphiFunction('Function FloatsEqual( const A, B : Float; const CompareDelta : Float) : Boolean');
 CL.AddDelphiFunction('Function FloatsCompare( const A, B : Float; const CompareDelta : Float) : TCompareResult');
 CL.AddConstantN('SingleCompareEpsilon','Extended').setExtended( 1.0E-5);
 CL.AddConstantN('DoubleCompareEpsilon','Extended').setExtended( 1.0E-13);
 CL.AddConstantN('ExtendedCompareEpsilon','Extended').setExtended( 1.0E-17);
 CL.AddConstantN('DefaultCompareEpsilon','Extended').setExtended( 1.0E-10);
 CL.AddDelphiFunction('Function ExtendedApproxEqual( const A, B : Extended; const CompareEpsilon : Double) : Boolean');
 CL.AddDelphiFunction('Function ExtendedApproxCompare( const A, B : Extended; const CompareEpsilon : Double) : TCompareResult');
 CL.AddDelphiFunction('Function DoubleApproxEqual( const A, B : Double; const CompareEpsilon : Double) : Boolean');
 CL.AddDelphiFunction('Function DoubleApproxCompare( const A, B : Double; const CompareEpsilon : Double) : TCompareResult');
 CL.AddDelphiFunction('Function FloatApproxEqual( const A, B : Float; const CompareEpsilon : Float) : Boolean');
 CL.AddDelphiFunction('Function FloatApproxCompare( const A, B : Float; const CompareEpsilon : Float) : TCompareResult');
 CL.AddDelphiFunction('Function FloatToStringA( const A : Float) : AnsiString');
 CL.AddDelphiFunction('Function FloatToStringB( const A : Float) : RawByteString');
 CL.AddDelphiFunction('Function FloatToStringU( const A : Float) : UnicodeString');
 CL.AddDelphiFunction('Function FloatToString( const A : Float) : String');
 CL.AddDelphiFunction('Function TryStringToFloatPA( const BufP : Pointer; const BufLen : Integer; out Value : Float; out StrLen : Integer) : TConvertResult');
 CL.AddDelphiFunction('Function TryStringToFloatPW( const BufP : Pointer; const BufLen : Integer; out Value : Float; out StrLen : Integer) : TConvertResult');
 CL.AddDelphiFunction('Function TryStringToFloatP( const BufP : Pointer; const BufLen : Integer; out Value : Float; out StrLen : Integer) : TConvertResult');
 CL.AddDelphiFunction('Function TryStringToFloatB( const A : RawByteString; out B : Float) : Boolean');
 CL.AddDelphiFunction('Function TryStringToFloatU( const A : UnicodeString; out B : Float) : Boolean');
 CL.AddDelphiFunction('Function TryStringToFloat( const A : String; out B : Float) : Boolean');
 CL.AddDelphiFunction('Function StringToFloatB( const A : RawByteString) : Float');
 CL.AddDelphiFunction('Function StringToFloatU( const A : UnicodeString) : Float');
 CL.AddDelphiFunction('Function StringToFloat( const A : String) : Float');
 CL.AddDelphiFunction('Function StringToFloatDefB( const A : RawByteString; const Default : Float) : Float');
 CL.AddDelphiFunction('Function StringToFloatDefU( const A : UnicodeString; const Default : Float) : Float');
 CL.AddDelphiFunction('Function StringToFloatDef( const A : String; const Default : Float) : Float');
 CL.AddDelphiFunction('Procedure Test');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function InCurrencyRange1_P( const A : Int64) : Boolean;
Begin Result := flcFloats.InCurrencyRange(A); END;

(*----------------------------------------------------------------------------*)
Function InCurrencyRange0_P( const A : Float) : Boolean;
Begin Result := flcFloats.InCurrencyRange(A); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcFloats_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@DoubleMin, 'DoubleMin', cdRegister);
 S.RegisterDelphiFunction(@DoubleMax, 'DoubleMax', cdRegister);
 S.RegisterDelphiFunction(@ExtendedMin, 'ExtendedMin', cdRegister);
 S.RegisterDelphiFunction(@ExtendedMax, 'ExtendedMax', cdRegister);
 S.RegisterDelphiFunction(@FloatMin, 'FloatMin', cdRegister);
 S.RegisterDelphiFunction(@FloatMax, 'FloatMax', cdRegister);
 S.RegisterDelphiFunction(@FloatClip, 'FloatClip', cdRegister);
 S.RegisterDelphiFunction(@InSingleRange, 'InSingleRange', cdRegister);
 S.RegisterDelphiFunction(@InDoubleRange, 'InDoubleRange', cdRegister);
 S.RegisterDelphiFunction(@InCurrencyRange0, 'InCurrencyRange0', cdRegister);
 S.RegisterDelphiFunction(@InCurrencyRange1, 'InCurrencyRange1', cdRegister);
 S.RegisterDelphiFunction(@ExtendedExponentBase2, 'ExtendedExponentBase2', cdRegister);
 S.RegisterDelphiFunction(@ExtendedExponentBase10, 'ExtendedExponentBase10', cdRegister);
 S.RegisterDelphiFunction(@ExtendedIsInfinity, 'ExtendedIsInfinity', cdRegister);
 S.RegisterDelphiFunction(@ExtendedIsNaN, 'ExtendedIsNaN', cdRegister);
 S.RegisterDelphiFunction(@FloatZero, 'FloatZero', cdRegister);
 S.RegisterDelphiFunction(@FloatOne, 'FloatOne', cdRegister);
 S.RegisterDelphiFunction(@FloatsEqual, 'FloatsEqual', cdRegister);
 S.RegisterDelphiFunction(@FloatsCompare, 'FloatsCompare', cdRegister);
 S.RegisterDelphiFunction(@ExtendedApproxEqual, 'ExtendedApproxEqual', cdRegister);
 S.RegisterDelphiFunction(@ExtendedApproxCompare, 'ExtendedApproxCompare', cdRegister);
 S.RegisterDelphiFunction(@DoubleApproxEqual, 'DoubleApproxEqual', cdRegister);
 S.RegisterDelphiFunction(@DoubleApproxCompare, 'DoubleApproxCompare', cdRegister);
 S.RegisterDelphiFunction(@FloatApproxEqual, 'FloatApproxEqual', cdRegister);
 S.RegisterDelphiFunction(@FloatApproxCompare, 'FloatApproxCompare', cdRegister);
 S.RegisterDelphiFunction(@FloatToStringA, 'FloatToStringA', cdRegister);
 S.RegisterDelphiFunction(@FloatToStringB, 'FloatToStringB', cdRegister);
 S.RegisterDelphiFunction(@FloatToStringU, 'FloatToStringU', cdRegister);
 S.RegisterDelphiFunction(@FloatToString, 'FloatToString', cdRegister);
 S.RegisterDelphiFunction(@TryStringToFloatPA, 'TryStringToFloatPA', cdRegister);
 S.RegisterDelphiFunction(@TryStringToFloatPW, 'TryStringToFloatPW', cdRegister);
 S.RegisterDelphiFunction(@TryStringToFloatP, 'TryStringToFloatP', cdRegister);
 S.RegisterDelphiFunction(@TryStringToFloatB, 'TryStringToFloatB', cdRegister);
 S.RegisterDelphiFunction(@TryStringToFloatU, 'TryStringToFloatU', cdRegister);
 S.RegisterDelphiFunction(@TryStringToFloat, 'TryStringToFloat', cdRegister);
 S.RegisterDelphiFunction(@StringToFloatB, 'StringToFloatB', cdRegister);
 S.RegisterDelphiFunction(@StringToFloatU, 'StringToFloatU', cdRegister);
 S.RegisterDelphiFunction(@StringToFloat, 'StringToFloat', cdRegister);
 S.RegisterDelphiFunction(@StringToFloatDefB, 'StringToFloatDefB', cdRegister);
 S.RegisterDelphiFunction(@StringToFloatDefU, 'StringToFloatDefU', cdRegister);
 S.RegisterDelphiFunction(@StringToFloatDef, 'StringToFloatDef', cdRegister);
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
end;

 
 
{ TPSImport_flcFloats }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcFloats.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcFloats(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcFloats.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcFloats_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
