unit uPSI_flcVectors;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcVectors = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TVectorClass(CL: TPSPascalCompiler);
procedure SIRegister_flcVectors(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_flcVectors_Routines(S: TPSExec);
procedure RIRegister_TVectorClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_flcVectors(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   flcStdTypes
  ,flcFloats
  ,flcMaths
  ,flcDataStructs
  ,flcVectors
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcVectors]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TVectorClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TVectorBaseArray', 'TVectorClass') do
  with CL.AddClassN(CL.FindClass('TVectorBaseArray'),'TVectorClass') do
  begin
    RegisterMethod('Function CreateInstance : AType');
    RegisterMethod('Procedure Add0( const V : MFloat);');
    RegisterMethod('Procedure Add1( const V : PMFloat; const Count : Integer);');
    RegisterMethod('Procedure Add2( const V : PInt64; const Count : Integer);');
    RegisterMethod('Procedure Add3( const V : MFloatArray);');
    RegisterMethod('Procedure Add4( const V : Int64Array);');
    RegisterMethod('Procedure Add5( const V : TVectorBaseArray);');
    RegisterMethod('Procedure Add6( const V : TInt64Array);');
    RegisterMethod('Procedure Add7( const V : TObject);');
    RegisterMethod('Procedure Subtract8( const V : MFloat);');
    RegisterMethod('Procedure Subtract9( const V : PMFloat; const Count : Integer);');
    RegisterMethod('Procedure Subtract10( const V : PInt64; const Count : Integer);');
    RegisterMethod('Procedure Subtract11( const V : MFloatArray);');
    RegisterMethod('Procedure Subtract12( const V : Int64Array);');
    RegisterMethod('Procedure Subtract13( const V : TVectorBaseArray);');
    RegisterMethod('Procedure Subtract14( const V : TInt64Array);');
    RegisterMethod('Procedure Subtract15( const V : TObject);');
    RegisterMethod('Procedure Multiply16( const V : MFloat);');
    RegisterMethod('Procedure Multiply17( const V : PMFloat; const Count : Integer);');
    RegisterMethod('Procedure Multiply18( const V : PInt64; const Count : Integer);');
    RegisterMethod('Procedure Multiply19( const V : MFloatArray);');
    RegisterMethod('Procedure Multiply20( const V : Int64Array);');
    RegisterMethod('Procedure Multiply21( const V : TVectorBaseArray);');
    RegisterMethod('Procedure Multiply22( const V : TInt64Array);');
    RegisterMethod('Procedure Multiply23( const V : TObject);');
    RegisterMethod('Function DotProduct24( const V : PMFloat; const Count : Integer) : MFloat;');
    RegisterMethod('Function DotProduct25( const V : PInt64; const Count : Integer) : MFloat;');
    RegisterMethod('Function DotProduct26( const V : MFloatArray) : MFloat;');
    RegisterMethod('Function DotProduct27( const V : Int64Array) : MFloat;');
    RegisterMethod('Function DotProduct28( const V : TVectorBaseArray) : MFloat;');
    RegisterMethod('Function DotProduct29( const V : TInt64Array) : MFloat;');
    RegisterMethod('Function DotProduct30( const V : TObject) : MFloat;');
    RegisterMethod('Function Norm : MFloat');
    RegisterMethod('Function Min : MFloat');
    RegisterMethod('Function Max : MFloat');
    RegisterMethod('Function Range( var Min, Max : MFloat) : MFloat');
    RegisterMethod('Function IsZero( const CompareDelta : MFloat) : Boolean');
    RegisterMethod('Function HasZero( const CompareDelta : MFloat) : Boolean');
    RegisterMethod('Function HasNegative : Boolean');
    RegisterMethod('Procedure Normalize');
    RegisterMethod('Procedure Negate');
    RegisterMethod('Procedure ValuesInvert');
    RegisterMethod('Procedure ValuesSqr');
    RegisterMethod('Procedure ValuesSqrt');
    RegisterMethod('Function Sum : MFloat');
    RegisterMethod('Function SumOfSquares : MFloat');
    RegisterMethod('Procedure SumAndSquares( out Sum, SumOfSquares : MFloat)');
    RegisterMethod('Procedure SumAndCubes( out Sum, SumOfSquares, SumOfCubes : MFloat)');
    RegisterMethod('Procedure SumAndQuads( out Sum, SumOfSquares, SumOfCubes, SumOfQuads : MFloat)');
    RegisterMethod('Function WeightedSum( const Weights : TVector) : MFloat');
    RegisterMethod('Function Mean : MFloat');
    RegisterMethod('Function HarmonicMean : MFloat');
    RegisterMethod('Function GeometricMean : MFloat');
    RegisterMethod('Function Median : MFloat');
    RegisterMethod('Function Mode : MFloat');
    RegisterMethod('Function Variance : MFloat');
    RegisterMethod('Function StdDev( var Mean : MFloat) : MFloat');
    RegisterMethod('Function PopulationVariance : MFloat');
    RegisterMethod('Function PopulationStdDev : MFloat');
    RegisterMethod('Function M1 : MFloat');
    RegisterMethod('Function M2 : MFloat');
    RegisterMethod('Function M3 : MFloat');
    RegisterMethod('Function M4 : MFloat');
    RegisterMethod('Function Skew : MFloat');
    RegisterMethod('Function Kurtosis : MFloat');
    RegisterMethod('Function Product : MFloat');
    RegisterMethod('Function Angle( const V : TVector) : MFloat');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_flcVectors(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('VectorFloatDelta','').SetString( ExtendedCompareDelta);
 CL.AddConstantN('VectorFloatDelta','').SetString( DoubleCompareDelta);
  CL.AddTypeS('TVectorBaseArray', 'TExtendedArray');
  CL.AddTypeS('TVectorBaseArray', 'TDoubleArray');
  SIRegister_TVectorClass(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EVector');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EVectorInvalidSize');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EVectorInvalidType');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EVectorEmpty');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EVectorInvalidValue');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EVectorDivisionByZero');
 CL.AddDelphiFunction('Procedure Test');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct30_P(Self: TVectorClass;  const V : TObject) : MFloat;
Begin Result := Self.DotProduct(V); END;

(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct29_P(Self: TVectorClass;  const V : TInt64Array) : MFloat;
Begin Result := Self.DotProduct(V); END;

(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct28_P(Self: TVectorClass;  const V : TVectorBaseArray) : MFloat;
Begin Result := Self.DotProduct(V); END;

(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct27_P(Self: TVectorClass;  const V : Int64Array) : MFloat;
Begin Result := Self.DotProduct(V); END;

(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct26_P(Self: TVectorClass;  const V : MFloatArray) : MFloat;
Begin Result := Self.DotProduct(V); END;

(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct25_P(Self: TVectorClass;  const V : PInt64; const Count : Integer) : MFloat;
Begin Result := Self.DotProduct(V, Count); END;

(*----------------------------------------------------------------------------*)
Function TVectorClassDotProduct24_P(Self: TVectorClass;  const V : PMFloat; const Count : Integer) : MFloat;
Begin Result := Self.DotProduct(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply23_P(Self: TVectorClass;  const V : TObject);
Begin Self.Multiply(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply22_P(Self: TVectorClass;  const V : TInt64Array);
Begin Self.Multiply(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply21_P(Self: TVectorClass;  const V : TVectorBaseArray);
Begin Self.Multiply(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply20_P(Self: TVectorClass;  const V : Int64Array);
Begin Self.Multiply(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply19_P(Self: TVectorClass;  const V : MFloatArray);
Begin Self.Multiply(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply18_P(Self: TVectorClass;  const V : PInt64; const Count : Integer);
Begin Self.Multiply(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply17_P(Self: TVectorClass;  const V : PMFloat; const Count : Integer);
Begin Self.Multiply(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassMultiply16_P(Self: TVectorClass;  const V : MFloat);
Begin Self.Multiply(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract15_P(Self: TVectorClass;  const V : TObject);
Begin Self.Subtract(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract14_P(Self: TVectorClass;  const V : TInt64Array);
Begin Self.Subtract(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract13_P(Self: TVectorClass;  const V : TVectorBaseArray);
Begin Self.Subtract(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract12_P(Self: TVectorClass;  const V : Int64Array);
Begin Self.Subtract(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract11_P(Self: TVectorClass;  const V : MFloatArray);
Begin Self.Subtract(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract10_P(Self: TVectorClass;  const V : PInt64; const Count : Integer);
Begin Self.Subtract(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract9_P(Self: TVectorClass;  const V : PMFloat; const Count : Integer);
Begin Self.Subtract(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassSubtract8_P(Self: TVectorClass;  const V : MFloat);
Begin Self.Subtract(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd7_P(Self: TVectorClass;  const V : TObject);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd6_P(Self: TVectorClass;  const V : TInt64Array);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd5_P(Self: TVectorClass;  const V : TVectorBaseArray);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd4_P(Self: TVectorClass;  const V : Int64Array);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd3_P(Self: TVectorClass;  const V : MFloatArray);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd2_P(Self: TVectorClass;  const V : PInt64; const Count : Integer);
Begin Self.Add(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd1_P(Self: TVectorClass;  const V : PMFloat; const Count : Integer);
Begin Self.Add(V, Count); END;

(*----------------------------------------------------------------------------*)
Procedure TVectorClassAdd0_P(Self: TVectorClass;  const V : MFloat);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcVectors_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TVectorClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TVectorClass) do
  begin
    RegisterMethod(@TVectorClass.CreateInstance, 'CreateInstance');
    RegisterMethod(@TVectorClassAdd0_P, 'Add0');
    RegisterMethod(@TVectorClassAdd1_P, 'Add1');
    RegisterMethod(@TVectorClassAdd2_P, 'Add2');
    RegisterMethod(@TVectorClassAdd3_P, 'Add3');
    RegisterMethod(@TVectorClassAdd4_P, 'Add4');
    RegisterMethod(@TVectorClassAdd5_P, 'Add5');
    RegisterMethod(@TVectorClassAdd6_P, 'Add6');
    RegisterMethod(@TVectorClassAdd7_P, 'Add7');
    RegisterMethod(@TVectorClassSubtract8_P, 'Subtract8');
    RegisterMethod(@TVectorClassSubtract9_P, 'Subtract9');
    RegisterMethod(@TVectorClassSubtract10_P, 'Subtract10');
    RegisterMethod(@TVectorClassSubtract11_P, 'Subtract11');
    RegisterMethod(@TVectorClassSubtract12_P, 'Subtract12');
    RegisterMethod(@TVectorClassSubtract13_P, 'Subtract13');
    RegisterMethod(@TVectorClassSubtract14_P, 'Subtract14');
    RegisterMethod(@TVectorClassSubtract15_P, 'Subtract15');
    RegisterMethod(@TVectorClassMultiply16_P, 'Multiply16');
    RegisterMethod(@TVectorClassMultiply17_P, 'Multiply17');
    RegisterMethod(@TVectorClassMultiply18_P, 'Multiply18');
    RegisterMethod(@TVectorClassMultiply19_P, 'Multiply19');
    RegisterMethod(@TVectorClassMultiply20_P, 'Multiply20');
    RegisterMethod(@TVectorClassMultiply21_P, 'Multiply21');
    RegisterMethod(@TVectorClassMultiply22_P, 'Multiply22');
    RegisterMethod(@TVectorClassMultiply23_P, 'Multiply23');
    RegisterMethod(@TVectorClassDotProduct24_P, 'DotProduct24');
    RegisterMethod(@TVectorClassDotProduct25_P, 'DotProduct25');
    RegisterMethod(@TVectorClassDotProduct26_P, 'DotProduct26');
    RegisterMethod(@TVectorClassDotProduct27_P, 'DotProduct27');
    RegisterMethod(@TVectorClassDotProduct28_P, 'DotProduct28');
    RegisterMethod(@TVectorClassDotProduct29_P, 'DotProduct29');
    RegisterMethod(@TVectorClassDotProduct30_P, 'DotProduct30');
    RegisterMethod(@TVectorClass.Norm, 'Norm');
    RegisterMethod(@TVectorClass.Min, 'Min');
    RegisterMethod(@TVectorClass.Max, 'Max');
    RegisterMethod(@TVectorClass.Range, 'Range');
    RegisterMethod(@TVectorClass.IsZero, 'IsZero');
    RegisterMethod(@TVectorClass.HasZero, 'HasZero');
    RegisterMethod(@TVectorClass.HasNegative, 'HasNegative');
    RegisterMethod(@TVectorClass.Normalize, 'Normalize');
    RegisterMethod(@TVectorClass.Negate, 'Negate');
    RegisterMethod(@TVectorClass.ValuesInvert, 'ValuesInvert');
    RegisterMethod(@TVectorClass.ValuesSqr, 'ValuesSqr');
    RegisterMethod(@TVectorClass.ValuesSqrt, 'ValuesSqrt');
    RegisterMethod(@TVectorClass.Sum, 'Sum');
    RegisterMethod(@TVectorClass.SumOfSquares, 'SumOfSquares');
    RegisterMethod(@TVectorClass.SumAndSquares, 'SumAndSquares');
    RegisterMethod(@TVectorClass.SumAndCubes, 'SumAndCubes');
    RegisterMethod(@TVectorClass.SumAndQuads, 'SumAndQuads');
    RegisterMethod(@TVectorClass.WeightedSum, 'WeightedSum');
    RegisterMethod(@TVectorClass.Mean, 'Mean');
    RegisterMethod(@TVectorClass.HarmonicMean, 'HarmonicMean');
    RegisterMethod(@TVectorClass.GeometricMean, 'GeometricMean');
    RegisterMethod(@TVectorClass.Median, 'Median');
    RegisterMethod(@TVectorClass.Mode, 'Mode');
    RegisterMethod(@TVectorClass.Variance, 'Variance');
    RegisterMethod(@TVectorClass.StdDev, 'StdDev');
    RegisterMethod(@TVectorClass.PopulationVariance, 'PopulationVariance');
    RegisterMethod(@TVectorClass.PopulationStdDev, 'PopulationStdDev');
    RegisterMethod(@TVectorClass.M1, 'M1');
    RegisterMethod(@TVectorClass.M2, 'M2');
    RegisterMethod(@TVectorClass.M3, 'M3');
    RegisterMethod(@TVectorClass.M4, 'M4');
    RegisterMethod(@TVectorClass.Skew, 'Skew');
    RegisterMethod(@TVectorClass.Kurtosis, 'Kurtosis');
    RegisterMethod(@TVectorClass.Product, 'Product');
    RegisterMethod(@TVectorClass.Angle, 'Angle');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcVectors(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TVectorClass(CL);
  with CL.Add(EVector) do
  with CL.Add(EVectorInvalidSize) do
  with CL.Add(EVectorInvalidType) do
  with CL.Add(EVectorEmpty) do
  with CL.Add(EVectorInvalidValue) do
  with CL.Add(EVectorDivisionByZero) do
end;

 
 
{ TPSImport_flcVectors }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcVectors.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcVectors(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcVectors.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcVectors(ri);
  RIRegister_flcVectors_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
