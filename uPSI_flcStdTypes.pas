unit uPSI_flcStdTypes;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcStdTypes = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_flcStdTypes(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_flcStdTypes_Routines(S: TPSExec);

procedure Register;

implementation


uses
   flcStdTypes
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcStdTypes]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_flcStdTypes(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('Int8', 'ShortInt');
  CL.AddTypeS('Int16', 'SmallInt');
  CL.AddTypeS('Int32', 'FixedInt');
  CL.AddTypeS('Int32', 'LongInt');
  CL.AddTypeS('UInt8', 'Byte');
  CL.AddTypeS('UInt16', 'Word');
  CL.AddTypeS('UInt32', 'FixedUInt');
  CL.AddTypeS('UInt32', 'LongWord');
  CL.AddTypeS('UInt64', 'Int64');
  CL.AddTypeS('Word8', 'UInt8');
  CL.AddTypeS('Word16', 'UInt16');
  CL.AddTypeS('Word32', 'UInt32');
  CL.AddTypeS('Word64', 'UInt64');
  CL.AddTypeS('NativeInt', 'Int64');
  CL.AddTypeS('NativeInt', 'Int32');
  CL.AddTypeS('PNativeInt', '^NativeInt // will not work');
  CL.AddTypeS('PNativeInt', '^NativeInt // will not work');
  CL.AddTypeS('PNativeInt', '^NativeInt // will not work');
  CL.AddTypeS('NativeUInt', 'Word64');
  CL.AddTypeS('NativeUInt', 'Word32');
  CL.AddTypeS('PNativeUInt', '^NativeUInt // will not work');
  CL.AddTypeS('PNativeUInt', '^NativeUInt // will not work');
  CL.AddTypeS('PNativeUInt', '^NativeUInt // will not work');
  CL.AddTypeS('NativeWord', 'NativeUInt');
  CL.AddTypeS('PNativeWord', '^NativeWord // will not work');
  CL.AddTypeS('PByte', '^Byte // will not work');
  CL.AddTypeS('PWord', '^Word // will not work');
  CL.AddTypeS('PLongWord', '^LongWord // will not work');
  CL.AddTypeS('PShortInt', '^ShortInt // will not work');
  CL.AddTypeS('PSmallInt', '^SmallInt // will not work');
  CL.AddTypeS('PLongInt', '^LongInt // will not work');
  CL.AddTypeS('PInteger', '^Integer // will not work');
  CL.AddTypeS('PInt64', '^Int64 // will not work');
  CL.AddTypeS('PInt8', '^Int8 // will not work');
  CL.AddTypeS('PInt16', '^Int16 // will not work');
  CL.AddTypeS('PInt32', '^Int32 // will not work');
  CL.AddTypeS('PWord8', '^Word8 // will not work');
  CL.AddTypeS('PWord16', '^Word16 // will not work');
  CL.AddTypeS('PWord32', '^Word32 // will not work');
  CL.AddTypeS('PWord64', '^Word64 // will not work');
  CL.AddTypeS('PUInt8', '^UInt8 // will not work');
  CL.AddTypeS('PUInt16', '^UInt16 // will not work');
  CL.AddTypeS('PUInt32', '^UInt32 // will not work');
  CL.AddTypeS('PUInt64', '^UInt64 // will not work');
 CL.AddConstantN('NativeWordBits','LongInt').SetInt( NativeWordSize * 8);
  CL.AddTypeS('Bool8', 'ByteBool');
  CL.AddTypeS('Bool16', 'WordBool');
  CL.AddTypeS('Bool32', 'LongBool');
  CL.AddTypeS('PBoolean', '^Boolean // will not work');
  CL.AddTypeS('PByteBool', '^ByteBool // will not work');
  CL.AddTypeS('PWordBool', '^WordBool // will not work');
  CL.AddTypeS('PLongBool', '^LongBool // will not work');
  CL.AddTypeS('PBool8', '^Bool8 // will not work');
  CL.AddTypeS('PBool16', '^Bool16 // will not work');
  CL.AddTypeS('PBool32', '^Bool32 // will not work');
  CL.AddTypeS('PSingle', '^Single // will not work');
  CL.AddTypeS('PDouble', '^Double // will not work');
  CL.AddTypeS('PExtended', '^Extended // will not work');
  CL.AddTypeS('Float32', 'Single');
  CL.AddTypeS('Float64', 'Double');
  CL.AddTypeS('Float80', 'Extended');
  CL.AddTypeS('PFloat32', '^Float32 // will not work');
  CL.AddTypeS('PFloat64', '^Float64 // will not work');
  CL.AddTypeS('PFloat80', '^Float80 // will not work');
  CL.AddTypeS('Float', 'Double');
  CL.AddTypeS('Float', 'Extended');
  CL.AddTypeS('PFloat', '^Float // will not work');
 CL.AddConstantN('MinSingle','Single').setExtended( 1.5E-45);
 CL.AddConstantN('MaxSingle','Single').setExtended( 3.4E+38);
 CL.AddConstantN('MinDouble','Double').setExtended( 5.0E-324);
 CL.AddConstantN('MaxDouble','Double').setExtended( 1.7E+308);
 CL.AddConstantN('MinExtended','Extended').setExtended( 5.0E-324);
 CL.AddConstantN('MaxExtended','Extended').setExtended( 1.7E+308);
 CL.AddConstantN('MinExtended','Extended').setExtended( 3.4E-4932);
 CL.AddConstantN('MaxExtended','Extended').setExtended( 1.1E+4932);
  CL.AddTypeS('PCurrency', '^Currency // will not work');
 CL.AddConstantN('MinCurrency','Currency').SetString( - 922337203685477.5807);
 CL.AddConstantN('MaxCurrency','Currency').SetString( 922337203685477.5807);
  CL.AddTypeS('PPointer', '^Pointer // will not work');
  CL.AddTypeS('ByteChar', 'AnsiChar');
  CL.AddTypeS('ByteChar', 'UTF8Char');
  CL.AddTypeS('ByteChar', 'Byte');
  CL.AddTypeS('PByteChar', '^ByteChar // will not work');
  CL.AddTypeS('AnsiChar', 'ByteChar');
  CL.AddTypeS('PAnsiChar', '^AnsiChar // will not work');
  CL.AddTypeS('RawByteChar', 'ByteChar');
  CL.AddTypeS('PRawByteChar', '^RawByteChar // will not work');
  CL.AddTypeS('RawByteString', 'AnsiString');
  CL.AddTypeS('PRawByteString', '^RawByteString // will not work');
  CL.AddTypeS('UTF8Char', 'ByteChar');
  CL.AddTypeS('PUTF8Char', '^UTF8Char // will not work');
  CL.AddTypeS('UTF8String', 'AnsiString');
  CL.AddTypeS('WideChar', 'Word');
  CL.AddTypeS('PWideChar', '^WideChar // will not work');
  CL.AddTypeS('UnicodeChar', 'WideChar');
  CL.AddTypeS('PUnicodeChar', '^UnicodeChar // will not work');
  CL.AddTypeS('UnicodeString', 'WideString');
  CL.AddTypeS('UCS4Char', 'LongWord');
  CL.AddTypeS('PUCS4Char', '^UCS4Char // will not work');
  CL.AddTypeS('ByteSet', 'set of Byte');
  CL.AddTypeS('ByteCharSet', 'set of ByteChar');
  CL.AddTypeS('PByteSet', '^ByteSet // will not work');
  CL.AddTypeS('PByteCharSet', '^ByteCharSet // will not work');
  CL.AddTypeS('TBytes', 'array of Bytes');
  CL.AddTypeS('ByteArray', 'TBytes');
  CL.AddTypeS('WordArray', 'array of Word');
  CL.AddTypeS('LongWordArray', 'array of LongWord');
  CL.AddTypeS('CardinalArray', 'array of Cardinal');
  CL.AddTypeS('Word8Array', 'ByteArray');
  CL.AddTypeS('Word16Array', 'array of Word16');
  CL.AddTypeS('Word32Array', 'array of Word32');
  CL.AddTypeS('Word64Array', 'array of Word64');
  CL.AddTypeS('UInt8Array', 'ByteArray');
  CL.AddTypeS('UInt16Array', 'array of UInt16');
  CL.AddTypeS('UInt32Array', 'array of UInt32');
  CL.AddTypeS('UInt64Array', 'array of UInt64');
  CL.AddTypeS('NativeUIntArray', 'array of NativeUInt');
  CL.AddTypeS('NativeWordArray', 'NativeUIntArray');
  CL.AddTypeS('ShortIntArray', 'array of ShortInt');
  CL.AddTypeS('SmallIntArray', 'array of SmallInt');
  CL.AddTypeS('LongIntArray', 'array of LongInt');
  CL.AddTypeS('IntegerArray', 'array of Integer');
  CL.AddTypeS('Int8Array', 'array of Int8');
  CL.AddTypeS('Int16Array', 'array of Int16');
  CL.AddTypeS('Int32Array', 'array of Int32');
  CL.AddTypeS('Int64Array', 'array of Int64');
  CL.AddTypeS('NativeIntArray', 'array of NativeInt');
  CL.AddTypeS('SingleArray', 'array of Single');
  CL.AddTypeS('DoubleArray', 'array of Double');
  CL.AddTypeS('ExtendedArray', 'array of Extended');
  CL.AddTypeS('FloatArray', 'array of Float');
  CL.AddTypeS('CurrencyArray', 'array of Currency');
  CL.AddTypeS('BooleanArray', 'array of Boolean');
  CL.AddTypeS('AnsiStringArray', 'array of AnsiString');
  CL.AddTypeS('RawByteStringArray', 'array of RawByteString');
  CL.AddTypeS('UnicodeStringArray', 'array of UnicodeString');
  CL.AddTypeS('StringArray', 'array of String');
  CL.AddTypeS('PointerArray', 'array of Pointer');
  CL.AddTypeS('ObjectArray', 'array of TObject');
  CL.AddTypeS('InterfaceArray', 'array of IInterface');
  CL.AddTypeS('ByteCharSetArray', 'array of ByteCharSet');
  CL.AddTypeS('ByteSetArray', 'array of ByteSet');
 CL.AddConstantN('MaxArraySize','LongWord').SetUInt( $7FFFFFFF);
  CL.AddTypeS('TStaticStringArray', 'TStaticUnicodeStringArray');
  CL.AddTypeS('TStaticStringArray', 'TStaticAnsiStringArray');
  CL.AddTypeS('PStaticByteArray', '^TStaticByteArray // will not work');
  CL.AddTypeS('PStaticWord16Array', '^TStaticWord16Array // will not work');
  CL.AddTypeS('PStaticWord32Array', '^TStaticWord32Array // will not work');
  CL.AddTypeS('PStaticWord64Array', '^TStaticWord64Array // will not work');
  CL.AddTypeS('PStaticLongWordArray', '^TStaticLongWordArray // will not work');
  CL.AddTypeS('PStaticCardinalArray', '^TStaticCardinalArray // will not work');
  CL.AddTypeS('PStaticNativeUIntArray', '^TStaticNativeUIntArray // will not wo'
   +'rk');
  CL.AddTypeS('PStaticNativeWordArray', '^TStaticNativeWordArray // will not wo'
   +'rk');
  CL.AddTypeS('PStaticShortIntArray', '^TStaticShortIntArray // will not work');
  CL.AddTypeS('PStaticSmallIntArray', '^TStaticSmallIntArray // will not work');
  CL.AddTypeS('PStaticLongIntArray', '^TStaticLongIntArray // will not work');
  CL.AddTypeS('PStaticIntegerArray', '^TStaticIntegerArray // will not work');
  CL.AddTypeS('PStaticInt32Array', '^TStaticInt32Array // will not work');
  CL.AddTypeS('PStaticInt64Array', '^TStaticInt64Array // will not work');
  CL.AddTypeS('PStaticNativeIntArray', '^TStaticNativeIntArray // will not work');
  CL.AddTypeS('PStaticSingleArray', '^TStaticSingleArray // will not work');
  CL.AddTypeS('PStaticDoubleArray', '^TStaticDoubleArray // will not work');
  CL.AddTypeS('PStaticExtendedArray', '^TStaticExtendedArray // will not work');
  CL.AddTypeS('PStaticBooleanArray', '^TStaticBooleanArray // will not work');
  CL.AddTypeS('PStaticCurrencyArray', '^TStaticCurrencyArray // will not work');
  CL.AddTypeS('PStaticAnsiStringArray', '^TStaticAnsiStringArray // will not wo'
   +'rk');
  CL.AddTypeS('PStaticRawByteStringArray', '^TStaticRawByteStringArray // will '
   +'not work');
  CL.AddTypeS('PStaticUnicodeStringArray', '^TStaticUnicodeStringArray // will '
   +'not work');
  CL.AddTypeS('PStaticStringArray', '^TStaticStringArray // will not work');
  CL.AddTypeS('PStaticPointerArray', '^TStaticPointerArray // will not work');
  CL.AddTypeS('PStaticObjectArray', '^TStaticObjectArray // will not work');
  CL.AddTypeS('PStaticInterfaceArray', '^TStaticInterfaceArray // will not work');
  CL.AddTypeS('PStaticCharSetArray', '^TStaticCharSetArray // will not work');
  CL.AddTypeS('PStaticByteSetArray', '^TStaticByteSetArray // will not work');
 CL.AddDelphiFunction('Procedure Test');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_flcStdTypes_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
end;

 
 
{ TPSImport_flcStdTypes }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcStdTypes.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcStdTypes(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcStdTypes.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcStdTypes_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
