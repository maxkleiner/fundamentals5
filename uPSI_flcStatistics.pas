unit uPSI_flcStatistics;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_flcStatistics = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TStatisticClass(CL: TPSPascalCompiler);
procedure SIRegister_flcStatistics(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TStatisticClass(CL: TPSRuntimeClassImporter);
procedure RIRegister_flcStatistics_Routines(S: TPSExec);
procedure RIRegister_flcStatistics(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   flcUtils
  ,flcMaths
  ,flcStatistics
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_flcStatistics]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TStatisticClass(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TStatisticClass') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TStatisticClass') do
  begin
    RegisterMethod('Procedure Assign( const S : TStatistic)');
    RegisterMethod('Function Duplicate : TStatistic');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function IsEqual( const S : TStatistic) : Boolean');
    RegisterMethod('Procedure Add( const V : MFloat);');
    RegisterMethod('Procedure Add1( const V : array of MFloat);');
    RegisterMethod('Procedure Add2( const V : TStatistic);');
    RegisterMethod('Procedure AddNegated( const V : TStatistic)');
    RegisterMethod('Procedure Negate');
    RegisterProperty('Count', 'Integer', iptr);
    RegisterProperty('Min', 'MFloat', iptr);
    RegisterProperty('Max', 'MFloat', iptr);
    RegisterProperty('Sum', 'MFloat', iptr);
    RegisterProperty('SumOfSquares', 'MFloat', iptr);
    RegisterProperty('SumOfCubes', 'MFloat', iptr);
    RegisterProperty('SumOfQuads', 'MFloat', iptr);
    RegisterMethod('Function Range : MFloat');
    RegisterMethod('Function Mean : MFloat');
    RegisterMethod('Function PopulationVariance : MFloat');
    RegisterMethod('Function PopulationStdDev : MFloat');
    RegisterMethod('Function Variance : MFloat');
    RegisterMethod('Function StdDev : MFloat');
    RegisterMethod('Function M1 : MFloat');
    RegisterMethod('Function M2 : MFloat');
    RegisterMethod('Function M3 : MFloat');
    RegisterMethod('Function M4 : MFloat');
    RegisterMethod('Function Skew : MFloat');
    RegisterMethod('Function Kurtosis : MFloat');
    RegisterMethod('Function GetAsString : String');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_flcStatistics(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStatistics');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStatisticsInvalidArgument');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStatisticsOverflow');
 CL.AddDelphiFunction('Function BinomialCoeff( N, R : Integer) : MFloat');
 CL.AddDelphiFunction('Function erf( x : MFloat) : MFloat');
 CL.AddDelphiFunction('Function erfc( const x : MFloat) : MFloat');
 CL.AddDelphiFunction('Function CummNormal( const u, s, X : MFloat) : MFloat');
 CL.AddDelphiFunction('Function CummNormal01( const X : MFloat) : MFloat');
 CL.AddDelphiFunction('Function InvCummNormal01( Y0 : MFloat) : MFloat');
 CL.AddDelphiFunction('Function InvCummNormal( const u, s, Y0 : MFloat) : MFloat');
 CL.AddDelphiFunction('Function CummChiSquare( const Chi, Df : MFloat) : MFloat');
 CL.AddDelphiFunction('Function CumF( const f, Df1, Df2 : MFloat) : MFloat');
 CL.AddDelphiFunction('Function CummPoisson( const X : Integer; const u : MFloat) : MFloat');
  SIRegister_TStatisticClass(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStatistic');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStatisticNoSample');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EStatisticDivisionByZero');
 CL.AddDelphiFunction('Procedure Test');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TStatisticClassSumOfQuads_R(Self: TStatisticClass; var T: MFloat);
begin T := Self.SumOfQuads; end;

(*----------------------------------------------------------------------------*)
procedure TStatisticClassSumOfCubes_R(Self: TStatisticClass; var T: MFloat);
begin T := Self.SumOfCubes; end;

(*----------------------------------------------------------------------------*)
procedure TStatisticClassSumOfSquares_R(Self: TStatisticClass; var T: MFloat);
begin T := Self.SumOfSquares; end;

(*----------------------------------------------------------------------------*)
procedure TStatisticClassSum_R(Self: TStatisticClass; var T: MFloat);
begin T := Self.Sum; end;

(*----------------------------------------------------------------------------*)
procedure TStatisticClassMax_R(Self: TStatisticClass; var T: MFloat);
begin T := Self.Max; end;

(*----------------------------------------------------------------------------*)
procedure TStatisticClassMin_R(Self: TStatisticClass; var T: MFloat);
begin T := Self.Min; end;

(*----------------------------------------------------------------------------*)
procedure TStatisticClassCount_R(Self: TStatisticClass; var T: Integer);
begin T := Self.Count; end;

(*----------------------------------------------------------------------------*)
Procedure TStatisticClassAdd2_P(Self: TStatisticClass;  const V : TStatistic);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TStatisticClassAdd1_P(Self: TStatisticClass;  const V : array of MFloat);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
Procedure TStatisticClassAdd_P(Self: TStatisticClass;  const V : MFloat);
Begin Self.Add(V); END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TStatisticClass(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TStatisticClass) do
  begin
    RegisterMethod(@TStatisticClass.Assign, 'Assign');
    RegisterMethod(@TStatisticClass.Duplicate, 'Duplicate');
    RegisterMethod(@TStatisticClass.Clear, 'Clear');
    RegisterMethod(@TStatisticClass.IsEqual, 'IsEqual');
    RegisterMethod(@TStatisticClassAdd_P, 'Add');
    RegisterMethod(@TStatisticClassAdd1_P, 'Add1');
    RegisterMethod(@TStatisticClassAdd2_P, 'Add2');
    RegisterMethod(@TStatisticClass.AddNegated, 'AddNegated');
    RegisterMethod(@TStatisticClass.Negate, 'Negate');
    RegisterPropertyHelper(@TStatisticClassCount_R,nil,'Count');
    RegisterPropertyHelper(@TStatisticClassMin_R,nil,'Min');
    RegisterPropertyHelper(@TStatisticClassMax_R,nil,'Max');
    RegisterPropertyHelper(@TStatisticClassSum_R,nil,'Sum');
    RegisterPropertyHelper(@TStatisticClassSumOfSquares_R,nil,'SumOfSquares');
    RegisterPropertyHelper(@TStatisticClassSumOfCubes_R,nil,'SumOfCubes');
    RegisterPropertyHelper(@TStatisticClassSumOfQuads_R,nil,'SumOfQuads');
    RegisterMethod(@TStatisticClass.Range, 'Range');
    RegisterMethod(@TStatisticClass.Mean, 'Mean');
    RegisterMethod(@TStatisticClass.PopulationVariance, 'PopulationVariance');
    RegisterMethod(@TStatisticClass.PopulationStdDev, 'PopulationStdDev');
    RegisterMethod(@TStatisticClass.Variance, 'Variance');
    RegisterMethod(@TStatisticClass.StdDev, 'StdDev');
    RegisterMethod(@TStatisticClass.M1, 'M1');
    RegisterMethod(@TStatisticClass.M2, 'M2');
    RegisterMethod(@TStatisticClass.M3, 'M3');
    RegisterMethod(@TStatisticClass.M4, 'M4');
    RegisterMethod(@TStatisticClass.Skew, 'Skew');
    RegisterMethod(@TStatisticClass.Kurtosis, 'Kurtosis');
    RegisterMethod(@TStatisticClass.GetAsString, 'GetAsString');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcStatistics_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@BinomialCoeff, 'BinomialCoeff', cdRegister);
 S.RegisterDelphiFunction(@erf, 'erf', cdRegister);
 S.RegisterDelphiFunction(@erfc, 'erfc', cdRegister);
 S.RegisterDelphiFunction(@CummNormal, 'CummNormal', cdRegister);
 S.RegisterDelphiFunction(@CummNormal01, 'CummNormal01', cdRegister);
 S.RegisterDelphiFunction(@InvCummNormal01, 'InvCummNormal01', cdRegister);
 S.RegisterDelphiFunction(@InvCummNormal, 'InvCummNormal', cdRegister);
 S.RegisterDelphiFunction(@CummChiSquare, 'CummChiSquare', cdRegister);
 S.RegisterDelphiFunction(@CumF, 'CumF', cdRegister);
 S.RegisterDelphiFunction(@CummPoisson, 'CummPoisson', cdRegister);
  RIRegister_TStatisticClass(CL);
  with CL.Add(EStatistic) do
  with CL.Add(EStatisticNoSample) do
  with CL.Add(EStatisticDivisionByZero) do
 S.RegisterDelphiFunction(@Test, 'Test', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_flcStatistics(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EStatistics) do
  with CL.Add(EStatisticsInvalidArgument) do
  with CL.Add(EStatisticsOverflow) do
end;

 
 
{ TPSImport_flcStatistics }
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcStatistics.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_flcStatistics(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_flcStatistics.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_flcStatistics(ri);
  RIRegister_flcStatistics_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
