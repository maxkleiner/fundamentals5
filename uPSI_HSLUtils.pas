unit uPSI_HSLUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_HSLUtils = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_HSLUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_HSLUtils_Routines(S: TPSExec);

procedure Register;

implementation


uses
   Windows
  ,Graphics
  ,HSLUtils
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_HSLUtils]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_HSLUtils(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Function ARGB( a, r, g, b : Byte) : Cardinal');
 CL.AddDelphiFunction('Function GetAValue( argb : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetRValue( argb : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetGValue( argb : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetBValue( argb : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetABGRAValue( abgr : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetABGRRValue( abgr : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetABGRGValue( abgr : DWORD) : Byte');
 CL.AddDelphiFunction('Function GetABGRBValue( abgr : DWORD) : Byte');
 CL.AddDelphiFunction('Function HSLtoRGB( H, S, L : double) : TColor');
 CL.AddDelphiFunction('Function AHSLtoARGB( A, H, S, L : double) : Cardinal');
 CL.AddDelphiFunction('Function HSLRangeToRGB( H, S, L : integer) : TColor');
 CL.AddDelphiFunction('Procedure ARGBtoAHSL( ARGB : TColor; var A, H, S, L : double)');
 CL.AddDelphiFunction('Procedure ABGRtoAHSL( ABGR : TColor; var A, H, S, L : double)');
 CL.AddDelphiFunction('Procedure RGBtoHSLRange( RGB : TColor; var H, S, L : integer)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_HSLUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ARGB, 'ARGB', cdRegister);
 S.RegisterDelphiFunction(@GetAValue, 'GetAValue', cdRegister);
 S.RegisterDelphiFunction(@GetRValue, 'GetRValue', cdRegister);
 S.RegisterDelphiFunction(@GetGValue, 'GetGValue', cdRegister);
 S.RegisterDelphiFunction(@GetBValue, 'GetBValue', cdRegister);
 S.RegisterDelphiFunction(@GetABGRAValue, 'GetABGRAValue', cdRegister);
 S.RegisterDelphiFunction(@GetABGRRValue, 'GetABGRRValue', cdRegister);
 S.RegisterDelphiFunction(@GetABGRGValue, 'GetABGRGValue', cdRegister);
 S.RegisterDelphiFunction(@GetABGRBValue, 'GetABGRBValue', cdRegister);
 S.RegisterDelphiFunction(@HSLtoRGB, 'HSLtoRGB', cdRegister);
 S.RegisterDelphiFunction(@AHSLtoARGB, 'AHSLtoARGB', cdRegister);
 S.RegisterDelphiFunction(@HSLRangeToRGB, 'HSLRangeToRGB', cdRegister);
 S.RegisterDelphiFunction(@ARGBtoAHSL, 'ARGBtoAHSL', cdRegister);
 S.RegisterDelphiFunction(@ABGRtoAHSL, 'ABGRtoAHSL', cdRegister);
 S.RegisterDelphiFunction(@RGBtoHSLRange, 'RGBtoHSLRange', cdRegister);
end;

 
 
{ TPSImport_HSLUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_HSLUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_HSLUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_HSLUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_HSLUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
